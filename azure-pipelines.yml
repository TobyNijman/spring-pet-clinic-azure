# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  # Web app name
  webAppName: 'PetClinicTest'

  # Environment name
  environmentName: 'PetClinic'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Maven cache
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

  # azureSubscriptionEndpoint: PetClinic
  # azureContainerRegistry: springpetcliniccontainerregistry.azurecr.io
  # azureResourceGroup: PetClinic
  # kubernetesCluster: petclinickubernetes

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishTestResults
    displayName: Maven Package and Publish Test Results
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Cache@2
      displayName: Cache Maven local repo
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - task: Maven@3
      displayName: Build
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        goals: 'spring-boot:build-image'
        publishJUnitResults: false

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/TEST-*.xml'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)'
        additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/target/jacoco.exec'

    - task: Docker@2
      displayName: Push Docker image
      inputs:
        containerRegistry: 'containerregistrypetclinic'
        repository: 'spring-petclinic'
        command: 'push'
        tags: 'latest'

    - task: HelmInstaller@0
      displayName: Helm Installer
      inputs:
        helmVersion: 'latest'
        installKubectl: true

    - task: HelmDeploy@0
      displayName: Publish Helm chart
      inputs:
        azureSubscriptionForACR: 'Toby Azure(09319cd6-009c-4ff4-9518-b30522744c60)'
        azureResourceGroupForACR: 'PetClinic'
        azureContainerRegistry: 'containerregistrypetclinic.azurecr.io'
        command: 'save'
        chartNameForACR: 'petclinic'
        chartPathForACR: './petclinicazure'

- stage: Deploy
  displayName: Deploy stage
  jobs:
  - job: DeployToKubernetes
    displayName: Deployment to kubernetes
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: HelmInstaller@0
      displayName: Helm Installer
      inputs:
        helmVersion: 'latest'
        installKubectl: true
    - task: HelmDeploy@0
      displayName: Helm List
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Toby Azure(09319cd6-009c-4ff4-9518-b30522744c60)'
        azureResourceGroup: 'PetClinic'
        kubernetesCluster: 'petclinickubernetes'
        namespace: 'petclinictest'
        command: 'ls'

#  - job: MavenBuildAndPublishImage
#    displayName: Maven Build Docker Image
#    #dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel
#    pool:
#      vmImage: $(vmImageName)
#
#    steps:
#      - task: Cache@2
#        displayName: Cache Maven local repo docker image build
#        inputs:
#          key: 'maven | "$(Agent.OS)" | **/pom.xml'
#          restoreKeys: |
#            maven | "$(Agent.OS)"
#            maven
#          path: $(MAVEN_CACHE_FOLDER)
#
#      - task: Maven@3
#        displayName: Build Docker image
#        inputs:
#          mavenPomFile: 'pom.xml'
#          goals: 'spring-boot:build-image'
#          publishJUnitResults: false
#
#      - task: Docker@2
#        displayName: Push Docker image
#        inputs:
#          containerRegistry: 'springpetcliniccontainerregistry'
#          repository: 'spring-pet-clinic'
#          command: 'push'
#          tags: 'latest'

    # - task: CopyFiles@2
    #   displayName: 'Copy Files to artifact staging directory'
    #   inputs:
    #     SourceFolder: '$(System.DefaultWorkingDirectory)'
    #     Contents: '**/target/*.?(war|jar)'
    #     TargetFolder: $(Build.ArtifactStagingDirectory)

    # - upload: $(Build.ArtifactStagingDirectory)
    #   artifact: drop

    # - stage: Deploy
    #  displayName: Deploy stage
    #  dependsOn: Build
    #  condition: succeeded()
    #  jobs:
    #   - deployment: DeployLinuxWebApp
    #    displayName: Deploy Linux Web App
    #    environment: $(environmentName)
    #    pool: 
    #      vmImage: $(vmImageName)
    #    strategy:
    #      runOnce:
    #        deploy:
    #          steps:
    #          - task: AzureWebApp@1
    #            displayName: 'Azure Web App Deploy: '
    #            inputs:
    #              azureSubscription: $(azureSubscription)
    #              appType: webAppLinux
    #              appName: $(webAppName)
    #              package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'

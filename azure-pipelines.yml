# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  # general
  serviceConnection: 'Toby Azure(09319cd6-009c-4ff4-9518-b30522744c60)'
  resourceGroup: 'PetClinic'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Maven cache
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

  # container registry
  azureContainerRegistry: containerregistrypetclinic.azurecr.io

  # service connections
  containerRegistryServiceConnection: 'containerregistrypetclinic'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishTestResults
    displayName: Maven Package and Publish Test Results
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Cache@2
      displayName: Cache Maven local repo
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - task: Maven@3
      displayName: Build
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        goals: 'spring-boot:build-image'
        publishJUnitResults: false

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/TEST-*.xml'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)'
        additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/target/jacoco.exec'

    - task: Docker@2
      displayName: Push Docker image
      inputs:
        containerRegistry: $(containerRegistryServiceConnection)
        repository: 'spring-petclinic'
        command: 'push'
        tags: 'latest'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: DeployLinuxWebApp
      displayName: Deploy Linux Web App
      environment: $(environmentName)
      pool:
        vmImage: $(vmImageName)
        strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy Azure App Service'
                inputs:
                  azureSubscription: 'Toby Azure(09319cd6-009c-4ff4-9518-b30522744c60)'
                  appType: webAppContainer
                  WebAppName: springPetClinicAzure
                  DockerNamespace: containerregistrypetclinic.azurecr.io
                  DockerRepository: 'spring-petclinic'
                  DockerImageTag: latest
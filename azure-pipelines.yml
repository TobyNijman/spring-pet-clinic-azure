# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '512eb81b-5963-4e78-8117-ae26b1148a33'
  
  # Web app name
  webAppName: 'PetClinicTest'

  # Environment name
  environmentName: 'PetClinic'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Maven cache
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Test Results
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Cache@2
      displayName: Cache Maven local repo
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - task: Maven@3
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        publishJUnitResults: false
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/TEST-*.xml'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Test Coverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/jacoco.xml'
        pathToSources: '**/src/main/java/.'
        reportDirectory: '/**/jacoco-report'
        additionalCodeCoverageFiles: '**/jacoco.exec'
        failIfCoverageEmpty: false

    # TODO fixme
    # - task: Maven@3
    #   displayName: 'Build Docker image
    #   inputs:
    #     mavenPomFile: 'pom.xml'
    #     goals: 'spring-boot:build-image'
    #     publishJUnitResults: false

    # - task: CopyFiles@2
    #   displayName: 'Copy Files to artifact staging directory'
    #   inputs:
    #     SourceFolder: '$(System.DefaultWorkingDirectory)'
    #     Contents: '**/target/*.?(war|jar)'
    #     TargetFolder: $(Build.ArtifactStagingDirectory)

    # - upload: $(Build.ArtifactStagingDirectory)
    #   artifact: drop

    # - stage: Deploy
    #  displayName: Deploy stage
    #  dependsOn: Build
    #  condition: succeeded()
    #  jobs:
    #   - deployment: DeployLinuxWebApp
    #    displayName: Deploy Linux Web App
    #    environment: $(environmentName)
    #    pool: 
    #      vmImage: $(vmImageName)
    #    strategy:
    #      runOnce:
    #        deploy:
    #          steps:
    #          - task: AzureWebApp@1
    #            displayName: 'Azure Web App Deploy: '
    #            inputs:
    #              azureSubscription: $(azureSubscription)
    #              appType: webAppLinux
    #              appName: $(webAppName)
    #              package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'
